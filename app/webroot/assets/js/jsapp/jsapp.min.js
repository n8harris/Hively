/**
 *  alloy.js - Part of the Alloy Library
 *
 *  Copyright (c) 2012, Tyler Seymour <tyler@unwitty.com>
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *  disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

var alloy = {};

alloy.global = this;

alloy.tmpl = alloy.tmpl || {};
alloy.views = alloy.views || {};
alloy.events = alloy.events || {};


alloy.nullFunction = function() {};

alloy.abstractFunction = function() {
	throw new Error("Abstract function missing implementation.");
};

alloy.makeSingleton = function(ClassName) {
	ClassName.setInstance = function() {
		return ClassName.__instance = new ClassName(arguments[0],arguments[1],arguments[2],arguments[3],arguments[4],arguments[5]);
	};
	ClassName.getInstance = function() {
		return ClassName.__instance || ClassName.setInstance.apply(this, arguments);
	};
	ClassName.deleteInstance = function() {
		ClassName.__instance = null;
	};
};

alloy.inheritFrom = function(parent, child) {
	function Constructor() {}

	Constructor.prototype = parent.prototype;
	child.superClass_ = parent.prototype;
	child.prototype = new Constructor();
	child.prototype.constructor = child;
};

alloy.isDefined = function(value) {
	return value !== undefined;
};

alloy.isNull = function(value) {
	return value === null;
};

alloy.isDefindedAndNotNull = function(value) {
	return value != null;
};

/**
 * Takes an array and builds a dictionary, with each key taken from the specified field in the record
 * @param {!array} ary
 * @param {!string} field
 * @return {object}
 */

alloy.buildIndexByField = function(ary, field) {

	var data = {};
	for(var i = 0; i < ary.length; i++) {
		data[ary[i][field]] = ary[i];
	}
	return data;
};

/**
 * Take a simple array of values and creates a dictionary, where each value is also the key
 * @param {!array} ary
 */
alloy.buildIndexFromValue = function(ary) {

	var data = {};
	for(var i = 0; i < ary.length; i++) {
		data[ary[i]] = ary[i];
	}
	return data;
};
/**
 *  alloy.api.js - Part of the Alloy Library
 *
 *  Copyright (c) 2012, Tyler Seymour <tyler@unwitty.com>
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *  disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  @require alloy.js
 *  @require alloy.api.js
 */

/*global $ alloy */


alloy.Session = function (data) {

	/**
	 * The user's session id
	 * @property	{string}
	 * @protected
	 */
	this._sessionId = null;

	/**
	 * Whether or not user is logged in
	 * @property	{bool}
	 * @protected
	 */
	this._loggedIn	= false;

	/**
	 * User's email address
	 * @property	{string}
	 * @protected
	 */
	this._email		= null;

	/**
	 * User's last login date
	 * @property	{string}
	 * @protected
	 */
	this._lastLoginDate		= null;

	/**
	 * User's role
	 * @property	string
	 * @protected
	 */
	this._role	= "anon";

	/**
	 * Whether or not the user has administrative rights
	 * @property	{bool}
	 * @protected
	 * TODO: Decouple from public library
	 */
	this._isAdmin	= false;

	if(data) {
		this.swallowApiCall(data);
	}
};
alloy.makeSingleton(alloy.Session);

/**
 * Triggered on successful login/logout.
 */
alloy.Session.EVENT_SESSION_CHANGE	= 'alloy_event_session_change';

/**
 * Triggered on login failure
 */
alloy.Session.EVENT_LOGIN_FAILURE	= 'alloy_event_login_failure';

/**
 * Triggered on logout failure
 */
alloy.Session.EVENT_LOGOUT_FAILURE	= 'alloy_event_logout_failure';

/**
 * Processes a response from the backend API, updates session information
 * @param {!object} response
 */
alloy.Session.prototype.swallowApiCall = function (response) {

	if (response.session_id && response.role) {

		this._sessionId = response.session_id;
		this._email		= response.email;
		this._role		= response.role;
		this._lastLoginDate = this._lastLoginDate ? this._lastLoginDate : response.last_login_date;
		this._loggedIn	= false;
		this._isAdmin	= false;

		switch(this._role) {
			case 'admin':
				this._isAdmin = true;
				this._loggedIn = true;
				break;
			case 'user':
				this._loggedIn = true;
				break;
		}
	}

};

/**
 * Attempt to log log the user in.
 *
 * @param {!string} email
 * @param {!string} password
 */
alloy.Session.prototype.login = function (email, password) {

	var success = function (response) {
		this._loggedIn = true;
		$(window.document).trigger(alloy.Session.EVENT_SESSION_CHANGE, true);
	};
	var error = function (response) {
		$(window.document).trigger(alloy.Session.EVENT_LOGIN_FAILURE);
	};

	alloy.Api.getInstance().request({
		api			: "user",
		call		: "login",
		data		: {
			email		: email,
			password	: password
		},
		success		: $.proxy(success,	this),
		error		: $.proxy(error,	this)
	});
};

/**
 * Attempt to log the user out
 */
alloy.Session.prototype.logout = function () {

	var success = function (event) {
		this._loggedIn	= false;
		this._role		= 'anon';
		$(window.document).trigger(alloy.Session.EVENT_SESSION_CHANGE, false);
	};
	var error = function (event) {
		$(window.document).trigger(alloy.Session.EVENT_LOGOUT_FAILURE);
	};

	alloy.Api.getInstance().request({
		api		: 'user',
		call	: 'logout',
		data	: {},
		success : $.proxy(success, this),
		error	: $.proxy(error, this)
	});
};

alloy.Session.prototype.setSessionId = function (sessionId) {
	this._sessionId = sessionId;
};

alloy.Session.prototype.getSessionId = function () {
	return this._sessionId;
};

alloy.Session.prototype.isLoggedIn = function () {
	return this._loggedIn;
};

alloy.Session.prototype.getSessionId = function () {
	return this._sessionId;
};

alloy.Session.prototype.isAdmin = function () {
	return this._isAdmin;
};

alloy.Session.prototype.getEmail = function () {
	return this._email;
};

/**
 *  alloy.api.js - Part of the Alloy Library
 *
 *  Copyright (c) 2012, Tyler Seymour <tyler@unwitty.com>
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *  disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  @require alloy.js
 *  @require alloy.session.js
 */

/*global alloy */

/**
 * The Alloy API library
 *
 * The API forces synchronization of requests to the backend API library.  This is useful as the client state may change
 * as each request as made.
 */
alloy.Api = function() {

	/**
	 * Serialized list of requests
	 * @protected
	 */
	this._requests = [];
};
alloy.makeSingleton(alloy.Api);

/**
 * Push a new request onto the request queue.
 * @param {!object} data - should contain the following keys
 *						data.api	{!string}	The API library to reference
 *						data.call	{!string}	The API call to make
 *						data.data	{object}	Any data to pass to the API call
 *						data.success {function} Called upon success (valid response code returned from API.
 *						data.error	 {function} Called upon error (invalid response code returned from API.
 */
alloy.Api.prototype.request = function(data) {

	this._requests.push(data);


	if(this._requests.length === 1) {
		this._makeNextCall();
	}
};

/**
 * Make the next API request
 * @param opt_event
 */
alloy.Api.prototype._makeNextCall = function(opt_event) {

	if(this._requests.length === 0) {
		return;
	}

	// grab the first request in the queue.  Note that this is not removed until the API call returns
	var request	= this._requests[0];

	var payload = request.data || {};
//	payload.data = request.data; //JSON.stringify(request.data);
	payload.api		= request.api;
	payload.call	= request.call;

	// Setting session id to be added as authentication header instead of post param.
	var authHeader = alloy.Session.getInstance().getSessionId();


	var success = function(response) {
		// each API returns a session ID. Update our local copy as it may have changed
		alloy.Session.getInstance().swallowApiCall(response);

		if(response.status == -1 && response.message == 'Not authorized') {
			$(window).trigger(alloy.events.SESSION_TIMEOUT);
			return;
		}

		if(response.status == -1){
			request.error(response);
			return;
		}
		// function making the API request may pass along optional success and error callbacks
		// note that the error one is executed in response to an error code from the API, not the
		// ajax call failing
		if(response.status && request.success) {
			request.success(response);
		}
		if(!response.status && request.error) {
			request.error(response);
		}

		// remove the front of the call queue and if needed, make the next call
		this._requests.shift();
		if(this._requests.length > 0) {
			this._makeNextCall();
		}
	};

	var error = function(event) {

		if(event.status != 200){

			var prevApi = this._requests[0].api;
			var prevCall = this._requests[0].call;
			if(prevApi != "logger"){
				var badRequestStr = " for request api:"+this._requests[0].api+" call: "+this._requests[0].call;
				this._requests.splice(0,1);

				alloy.Api.getInstance().request({
					api: 'logger',
					call: 'add',
					data: {
						message: "\""+event.status+" "+event.statusText+"\""+badRequestStr
					},
					success: function(response){console.log(response);},
					error: function(response){console.log(response);}
				});

				if(event.status != 0){
					bootbox.alert('An error occurred while making a request: '+event.status+' - '+event.statusText);
				}
			}
			this._requests.shift();
			if(this._requests.length > 0) {
				this._makeNextCall();
			}
		}

	};

	$.ajax("/api", {
		data	: payload,
		success	: $.proxy(success, this),
		error	: $.proxy(error, this),
		type    : 'POST',
		beforeSend : function(xhr) {
			xhr.setRequestHeader("Authorization", authHeader);
		}

	});
};

/**
 *  alloy.view.js - Part of the Alloy Library
 *
 *  Copyright (c) 2012, Tyler Seymour <tyler@unwitty.com>
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *  disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */
alloy.View = Backbone.View.extend({

	initialize: function(options) {

		_.bindAll(this);
		this._initialize(options);

		this._isRendered = false
		this._isBound = false;
		this._inDom = false;
	},
	_initialize: function(options) {},

	inject: function(element, options) {

		options = options ? options : {};
		options = _.defaults(options, {
			method: 'html'
		});

		if(!this._isRendered) {
			this.render();
		}

		if(!this._isBound) {
			this.bind();
		}


		$(element)[options.method](this.el);

//		if(opt_replace) {
//			$(element).replaceWith(this.el);
//		} else {
//			$(element).html(this.el);
//		}

		if(!this._inDom) {
			this.onEnterDom();
		}
		return this;
	},
	injectChild: function(child, element, options) {

		child.inject(element, options);

		this.addChild(child);
		return this;
	},

	render: function() {
		if(this._isRendered) {
			this.unbind();
		}
		this._render();
		this.bind();
		this._isRendered = true;
		$('input, textarea', this.el).placeholder();
		return this;
	},
	_render: function() {},
	addChild: function(childView) {
		if(this._children == undefined) {
			this._children = [];
		}
		this._children.push(childView);
		return this;
	},
	clearChildren: function() {

		this.unbindChildren();
		this._children = [];
		return this;
	},
	bind: function() {

		if(this._isBound) {
			return this;
		}

		if(this._isRendered) {
			// Backbone's view will delegate events upon initialization
			// we only need to delegate events if we're re-rendering
			this.delegateEvents();
		}

		this.bindChildren();
		this._bind();

		this._isBound = true;
		return this;
	},
	_bind: function() {},
	unbind: function() {
		this.stopListening();
		this.undelegateEvents();
		this.unbindChildren();
		this._unbind();
		this._isBound = false;
		return this;
	},
	_unbind: function() {},
	bindChildren: function() {
		if(this._children) {
			for(var i = 0; i < this._children.length; i++) {
				this._children[i].bind();
			}
		}
		return this;
	},
	unbindChildren: function() {
		if(this._children) {
			for(var i = 0; i < this._children.length; i++) {
				this._children[i].unbind();
			}
		}
		return this;
	},
	onEnterDom: function() {

		this._inDom = true;
		this._onEnterDom();
		if(this._children) {
			for(var i = 0; i < this._children.length; i++) {
				this._children[i].onEnterDom();
			}
		}
		return this;
	},
	_onEnterDom: function() {},
	onExitDom: function() {

		this._inDom = false;
		this._onExitDom();
		if(this._children) {
			for(var i = 0; i < this._children.length; i++) {
				this._children[i].onExitDom();
			}
		}
		return this;
	},
	_onExitDom: function() {}



});
/**
 *  alloy.alerts.js - Part of the Alloy Library
 *
 *  Copyright (c) 2012, Tyler Seymour <tyler@unwitty.com>
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *  disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  @require alloy.js
 */
/*global alloy*/


alloy.Alerts = function() {

	this._alerts = [];
};
alloy.makeSingleton(alloy.Alerts);

alloy.Alerts.prototype.add = function(alertView) {

	this._alerts.push(alertView);
	return this;
};

alloy.Alerts.prototype.show = function(elm) {

	for(var i = 0; i < this._alerts.length; i++) {
		this._alerts[i].render();
		$(elm).append(this._alerts[i].el);
		if($(elm).is(":hidden")) {
			$(elm).slideDown();
		}
	}
	this._alerts = [];
	return this;
};


alloy.events.OVERLAY_CLOSED = 'overlay_closed';
alloy.events.SESSION_TIMEOUT = 'session_timeout';
/**
 *  alloy.overlay_manager.js - Part of the Alloy Library
 *
 *  Copyright (c) 2012, Tyler Seymour <tyler@unwitty.com>
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following
 *  disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
 *  SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 *  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
 *  USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 *  @require alloy.js
 *  @require alloy.session.js
 */
/*global alloy */

alloy.OverlayManager = alloy.OverlayManager || {};

alloy.OverlayManager = function(opt_data) {

	this._overlays = [];

	$(window.document).bind(alloy.OverlayManager.EVENT_CLOSE, $.proxy(this._onOverlayClose, this));
//	$(document).bind('keyup', $.proxy(this.onKeyUp, this));
};
alloy.makeSingleton(alloy.OverlayManager);
alloy.OverlayManager.EVENT_CLOSE	= "alloy_event_overlay_close";


alloy.OverlayManager.prototype.add = function(view) {

	this._overlays.push(view);
	if(this._overlays.length === 1) {
		this.show(this._overlays[0]);
	}
};

alloy.OverlayManager.prototype.show = function(view) {

	var modalSize = view.modalSize ? view.modalSize : 'large';

	view.render();
	$(view.el).addClass('modal modal-' + view.modalSize);
//	$(view.el).on('hidden.Overlay', $.proxy(this._onOverlayClose, this));
	$(view.el).appendTo($("body")).modal({
		show: true,
		backdrop:true,
		keyboard: false
	});
	view.onEnterDom();
	$("body").addClass('modal-open');
};

alloy.OverlayManager.prototype._onOverlayClose = function(event, overlay) {

	this._overlays[0].unbind();
	$(this._overlays[0].el).modal('hide');
//	$("body").removeClass('modal-open');
	this._overlays.shift();
	if(this._overlays.length > 0) {
		this.show(this._overlays[0]);
	}
};

alloy.OverlayManager.prototype.isOpen = function() {
	return this._overlays.length > 0;
}

//alloy.OverlayManager.prototype.getCurrentOverlay = function() {
//	return this._overlays.length > 0 ? this._overlays[0] : null;
//};

//alloy.OverlayManager.prototype.closeCurrentAndClearAll = function() {
//
//	if(this._overlays.length > 0) {
//		var current = this._overlays.shift();
//		this._overlays = [];
//		current.el.remove();
//	}
//};

alloy.OverlayManager.prototype.closeCurrent = function() {

	if(this._overlays.length > 0) {
		$("body").removeClass('modal-open');
		this._overlays[0].unbind();
		$(this._overlays[0].el).modal('hide');
		this._overlays.shift();
		if(this._overlays.length > 0) {
			this.show(this._overlays[0]);
		}
		$(window.document).trigger(alloy.events.OVERLAY_CLOSED);
	}
};

//alloy.OverlayManager.prototype.onKeyUp = function(event) {
//	if(event.keyCode == 27 && this._overlays.length > 0) {
//		this.closeCurrent();
//	}
//};

alloy.tmpl.alert = ([
	"<a class='close' data-dismiss='alert' href='#'>&times;</a>",
	"{{if title}}<h5>${title}</h5>{{/if}}",
	"{{if message}}<span>${message}</span>{{/if}}",
	"{{if html}}<div id='html'></div>{{/if}}"
]).join("");

$.templates({
	"alloy.tmpl.alert": alloy.tmpl.alert
});


App = {
	environment: null,
	models: {},
	collections: {},
	tmpl: {},
	events: {
		USER_DELETED: 'user_deleted',
		CONTENT_PROGRESS: 'content_progress'
	},
	views: {},
	controls: {},
	overlays: {},
	vent: _.extend({}, Backbone.Events)

};

App.Model = Backbone.Model.extend({});

App.Collection = Backbone.Collection.extend({
	model: App.Model
});

App.RouterBase = Backbone.Router.extend({


	public: [],
	require_active_account: [],

	lastViewName: null,
	headerControl: null,

	isPublic: function(name) {
		return _.indexOf(this.public, name) >= 0;
	},
	requiresActiveAccount: function(name) {
		return _.indexOf(this.require_active_account, name) >= 0;
	},
	before: function(route, name, args) {

		// verify user can load the view
		/*if(!App.Data.getInstance().isLoggedIn() && !this.isPublic(name)) {

		}

		if(!this.isPublic() && this.requiresActiveAccount(name) && !App.Data.getInstance().account.get('can_access')) {

		}*/

		$('html, body').animate({
			scrollTop: 0
		}, 50);

		return true;
	},
	initialize: function(options) {

		this.currentView = null;

		$(window).bind(alloy.events.SESSION_TIMEOUT, null, $.proxy(this.onSessionTimeout, this));

		this.bind('route', this._pageView);
	},
	onSessionTimeout: function(event) {

		event.stopPropagation();

		window.location.reload();
	},
	showView: function(view) {

		if(this.currentView) {
			this.currentView.unbind();
		}
		this.currentView = view;

		view.inject($("#main"));
	},
	_extractParameters: function(route, fragment) {
		var result = route.exec(fragment).slice(1);
		result.unshift(this._deparam(result[result.length-1]));
		return result.slice(0,-1);
	},
	_deparam: function(paramString){
		var result = {};
		if( ! paramString){
			return result;
		}
		$.each(paramString.split('&'), function(index, value){
			if(value){
				var param = value.split('=');
				result[param[0]] = param[1];
			}
		});
		return result;
	},
	_pageView: function() {

		var path = Backbone.history.getFragment();
		var route = path.split('?')[0];
	}
});

App.Router = App.RouterBase.extend({

	routes: {
		"": "businesses"
	},
	public: [
		"businesses"
	],
	require_active_account: [],

	businesses: function(opt_params) {
			var view = new App.views.PageBusinesses();
			this.showView(view);
	}
});
alloy.makeSingleton(App.Router);

//start 
 App.tmpl.tmpl_page_businesses = '#tmpl_page_businesses'; 
 App.tmpl.tmpl_partial_business = '#tmpl_partial_business'; 
 //end

App.Data = function(data) {

	_.bindAll(this);

	data = data || {};


	data = _.defaults(data, {
		session: new App.Model(),
		user: new App.Model(),
		account: new App.Model(),
		users: new App.Collection(),
		clubhouseSubscription: new App.Model(),
		completedTasks: new App.Collection(),
		progress: new App.Collection(),
		chapterActivities: new App.Collection()
	});


	_.extend(this, data);
	
	// make sure the root user and the one included in the full user list are the same model
	if(this.user.get('id')) {
		var user = this.users.get(this.user.get('id'));
		if(user) {
			this.user = user;
		}
	}
};
alloy.makeSingleton(App.Data);

App.Data.prototype.isLoggedIn = function() {

	return !(this.user.get('role') == 'anon' || this.user.get('role') == undefined);
};




App.views.PageBusinesses = alloy.View.extend({

	className: 'container',
	events: {},

	_initialize: function(options) {
		this.businessesContainer = "#businesses"
	},

	_render: function() {
		$(this.el).html($(App.tmpl.tmpl_page_businesses).render());

		alloy.Api.getInstance().request({
			api: 'business',
			call: 'get',
			success: this.onBusinesses
		});
	},

	onBusinesses: function(response) {

		var businesses = new App.Collection(response.data.businesses);
		businesses.forEach(this.injectBusiness);
	},

	injectBusiness: function(business) {

		$(this.businessesContainer, this.el).append($(App.tmpl.tmpl_partial_business).render({
			business: business.toJSON()
		}));
	},
});

//# sourceMappingURL=../../maps/jsapp.min.js.map